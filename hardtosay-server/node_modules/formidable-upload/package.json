{
  "name": "formidable-upload",
  "version": "0.0.3",
  "description": "Chainable file upload api for express using formidable",
  "main": "index.js",
  "scripts": {
    "test": "node test"
  },
  "dependencies": {
    "formidable": "*",
    "async": "*",
    "mkdirp": "*",
    "imguri": "*",
    "magickwand": "*"
  },
  "optionalDependencies": {
    "imguri": "*",
    "magickwand": "*"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:vnykmshr/formidable-upload.git"
  },
  "keywords": [
    "formidable",
    "express",
    "file",
    "upload"
  ],
  "author": {
    "name": "Vinayak Mishra",
    "email": "viks@vnykmshr.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/vnykmshr/formidable-upload/issues"
  },
  "readme": "# Formidable Upload\n\nChainable file upload api for express using [formidable](https://github.com/felixge/node-formidable).\n\n## Installation\n\n    $ npm install formidable-upload\n\n## Usage\n\n    var upload = require('formidable-upload');\n\n    // ..\n\n    upload()\n        .accept('image/jpeg')\n        .to(['public', 'images'])\n        .resize({\n            use: 'resize',\n            settings: {\n                width: 800,\n                quality: 80\n            }\n        })\n        .imguri()\n        .exec(req.files.displayImage, function(err, file) {\n            // further process file\n        });\n\n## Processing Chains\n\nAfter creating an `Upload` object by calling `upload()` the upload object exposes API methods\n\n### accept\nRestricts files accepted by upload to specified mime types. Mime types can be specified as strings, array of strings, regex or array of regex. In case match fails an `err` object is passed to the `exec` callback field `accept` set to true.\n\n#### Examples\n\nAccept mp4, ogg and jpeg files in upload\n\n      accept(['audio/mp4', 'audio/ogg', 'image/jpeg'])\n\nAccept only mp4\n\n      accept('audio/mp4')\n\nAccept all image mime types\n\n      accept([/image*/])\n\n### to\nMoves files from temp express upload location to the target location. The `to` processor modifies `file.path` and `file.name` fields of the original express upload file to point to the moved upload file. `to` will use any given file extension from the original `file.name`. A target directory is expected as argument, in case an array of strings is passed this array will be joined via `path.join`.\n\n#### Examples\n\nMoves uploaded files to public/images\n\n      to(['public', 'images'])\n\nMoves uploaded files to public/images\n\n      to('public/images')\n\n### resize\nAllows uploaded files to be processed via Magickwand. See [magickwand page](https://github.com/qzaidi/magickwand) for using magickwand. Magicwand supports `resize` and `thumbnail` methods. Please refer the magickwand page if you face any issue while installing the module.\n\n#### Examples\n\nResize an uploaded image to width of 800 and quality of 80 maintaining the aspect ratio.\n\n      resize({\n          use: 'resize',\n          settings: {\n              width: 800,\n              quality: 80\n          }\n      })\n\n\n### imguri\nConvert the uploaded image to data uri, sets `req.files.userfile.data` with Base64 encoded data.\n\n      imguri()\n\n\n### process\nGeneric handler to pass custom transformation code in the processing chain. Functions passed to `process` must have the signature\n\n      fn(file, cb)\n\nWhere file is the processed upload file and `cb` is the callback.\n\n### exec\nExecutes a processing chain. Processing chains are reusable and may be executed multiple times. In case the file is not part of the upload or is empty an `err` is passed to the callback with a field `noFile` set to true.\n\n\n## Middleware\nInstead of executing and managing upload file processing in your routes, express-upload can be used as middleware in express. Any processing errors (no file, file type not accepted,...) are stored in a `err` property of the file to upload.\n\n### Example\n\n      // Build an upload instance but don't execute it right now\n      var uploader = upload()\n          .accept('image/jpeg')\n          .to(['public', 'images'])\n          .resize({\n              use: 'resize',\n              settings: {\n                  width: 800,\n                  quality: 80\n              }\n          })\n          .imguri();\n\n\n      // Define a middleware for handling image upload\n      app.post('/upload', uploader.middleware('userfile'), routes.upload);\n\nIn case an error would occur when uploading the next middleware will be called with the error.\n\n## Example Code\n[Formidable Upload Example](https://github.com/vnykmshr/formidable-upload-example).\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/vnykmshr/formidable-upload",
  "_id": "formidable-upload@0.0.3",
  "_from": "formidable-upload@"
}
